#!/usr/bin/env python

import getopt
import json
import os
import sys
import time
import types

sys.dont_write_bytecode = True
from webhdfs import WebHDFS


def parse_args(args, options, long_options=[]):
  try:
    return getopt.getopt(args, options, long_options)
  except getopt.GetoptError as e:
    print str(e)
    sys.exit(2)


def dfs_home(args, hdfs):
  """ get home dir
  """
  opts, args = parse_args(args, '')
  try:
    r = hdfs.get_home_dir()
    print r
  except Exception as e:
    print str(e)


def dfs_ls(args, hdfs):
  """ list files/dirs status
  """
  def get_bits(file_type, permission, acl=False):
    b_t = file_type[0].lower().replace('f', '-')
    b_p_all = 'rwxrwxrwx'
    b_p = ''
    p = int(permission, 8)
    sticky = (p & 2**9 != 0)
    for i in range(8, -1, -1):
      if p & 2**i == 0:
        b_p += '-'
      else:
        b_p += b_p_all[8-i]
    # sticky bit
    if (p & 2**9 != 0):
      b_p = b_p[:-1] + ('t' if b_p[-1] == 'x' else 'T')
    b_a = '+' if acl else ' '
    return b_t + b_p + b_a

  opts, args = parse_args(args, '')
  if not args:
    args = ['']
  for a in args:
    if a.startswith('/'):
      print '{}:'.format(a)
    else:
      print '~/{}:'.format(a)
    try:
      res = hdfs.list_status(a)
      if not res:
        continue
      if a != '/':
        a = a.rstrip('/')
      a = os.path.abspath('/' + a)[1:]

      fmt = '{{}} {{:{}}} {{:{}}} {{:>{}}} {{}} {{}}'.format(
        max([len(r['owner']) for r in res]),
        max([len(r['group']) for r in res]),
        max([len(str(r['length'])) for r in res])
      )
      for r in res:
        r['modificationTime'] = time.strftime(
          '%F %H:%M', time.localtime(r['modificationTime']/1000))
        r['type'] = r['type'][0].lower().replace('f', '-')
        if a and r['pathSuffix']:
          r['pathSuffix'] = '/' + r['pathSuffix']
        print fmt.format(
          get_bits(r['type'], r['permission'], r.get('aclBit', False)),
          r['owner'],
          r['group'],
          r['length'],
          r['modificationTime'],
          a + r['pathSuffix']
        )
    except Exception as e:
      print str(e)


def dfs_cat(args, hdfs):
  """ output file content
  """
  opts, args = parse_args(args, '')
  for a in args:
    try:
      print hdfs.open(a)
    except Exception as e:
      print str(e)
      sys.exit(1)


def dfs_mv(args, hdfs):
  """ move(rename) files/dirs
  """
  opts, args = parse_args(args, '')
  if len(args) < 2:
    print 'needs two arguments'
    sys.exit(2)
  dst = args[-1]
  for src in args[:-1]:
    ddst = '{}/{}'.format(dst.rstrip('/'), os.path.basename(src))
    if not hdfs.rename(src, ddst) and not hdfs.rename(src, dst):
      print 'cannot move {} to {}'.format(src, dst)


def dfs_put(args, hdfs):
  """ copy from local
  """
  opts, args = parse_args(args, '')
  #try:
  #  hdfs.create()
  #except Exception as e:
  #  print str(e)


def dfs_get(args, hdfs):
  """ copy to local
  """
  opts, args = parse_args(args, '')
  #try:
  #  hdfs.open()
  #except Exception as e:
  #  print str(e)


def dfs_mkdir(args, hdfs):
  """ make dirs
  """
  permission = '700'
  opts, args = parse_args(args, 'p:')
  for o, a in opts:
    if o == '-p':
      permission = a
  for a in args:
    if not hdfs.mkdirs(a, permission):
      print 'cannot make dir {}'.format(a)


def dfs_rm(args, hdfs):
  """ delete files/dirs
  """
  recursive = False
  opts, args = parse_args(args, 'r')
  for o, a in opts:
    if o == '-r':
      recursive = True
  for a in args:
    if not hdfs.delete(a, recursive):
      print 'cannot delete {}'.format(a)


def dfs_chown(args, hdfs):
  """ set owner of files/dirs
  """
  owner = ''
  group = ''
  opts, args = parse_args(args, 'o:g:')
  for o, a in opts:
    if o == '-o':
      owner = a
    if o == '-g':
      group = a
  for a in args:
    try:
      hdfs.setowner(a, owner, group)
    except Exception as e:
      print str(e)


def dfs_chmod(args, hdfs):
  """ set permission of files/dirs
  """
  permission = '700'
  opts, args = parse_args(args, 'p:')
  for o, a in opts:
    if o == '-p':
      permission = a
  for a in args:
    try:
      hdfs.set_permission(a, permission)
    except Exception as e:
      print str(e)


def dfs_summary(args, hdfs):
  """ get content summary of a dir
  """
  opts, args = parse_args(args, '')
  if not args:
    args = ['']
  for a in args:
    if a.startswith('/'):
      print '{}:'.format(a)
    else:
      print '~/{}:'.format(a)
    try:
      r = hdfs.get_content_summary(args[0])
      print json.dumps(r, indent=2)
    except Exception as e:
      print str(e)



def main():
  func_prefix = 'dfs_'
  func_list = [
    n for n in globals()
    if isinstance(globals()[n], types.FunctionType)
        and n.startswith(func_prefix)
  ]

  cmd = sys.argv[1] if len(sys.argv) > 1 else ''
  func_called = func_prefix + cmd

  if func_called not in func_list:
    print 'usage: {} <command> [<args>]'.format(__file__)
    print
    print 'supported commands are:'
    print
    for func in func_list:
      print(
        '{:10}{}'.format(
          func.replace(func_prefix, ''),
          globals()[func].__doc__.strip()
        )
      )
    print
    return

  with open(sys.path[0] + '/config.json', 'r') as f:
    cfg = json.load(f)

  hdfs = WebHDFS(**cfg)
  globals()[func_called](sys.argv[2:], hdfs)


if __name__ == "__main__":
  main()

