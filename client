#!/usr/bin/env python

import getopt
import json
import os
import sys
import time
import types

sys.dont_write_bytecode = True
from webhdfs import WebHDFS


def parse_args(args, options, long_options=[]):
  try:
    return getopt.getopt(args, options, long_options)
  except getopt.GetoptError as e:
    print str(e)
    sys.exit(2)


def dfs_home(args, hdfs):
  """ get home dir
  """
  opts, args = parse_args(args, '')
  try:
    r = hdfs.get_home_dir()
    print r
  except Exception as e:
    print str(e)


def dfs_ls(args, hdfs):
  """ list files/dirs status
  """
  opts, args = parse_args(args, '')
  if not args:
    args = ['']

  for a in args:
    if len(args) > 1:
      if a.startswith('/'):
        print '{}:'.format(a)
      else:
        print '~/{}:'.format(a)
    try:
      res = hdfs.list_status(a)
      if not res:
        continue
      if a != '/':
        a = a.rstrip('/')
      a = os.path.abspath('/' + a)[1:]

      fmt = '{{}} {{:>4}} {{:{}}} {{:{}}} {{:>{}}} {{}} {{}}'.format(
        max([len(r['owner']) for r in res]),
        max([len(r['group']) for r in res]),
        max([len(str(r['length'])) for r in res])
      )
      for r in res:
        r['modificationTime'] = time.strftime(
          '%F %H:%M', time.localtime(r['modificationTime']/1000))
        r['type'] = r['type'][0].lower().replace('f', '-')
        #r['permission'] = r['permission']
        if a and r['pathSuffix']:
          r['pathSuffix'] = '/' + r['pathSuffix']

        print fmt.format(
          r['type'],
          r['permission'],
          r['owner'],
          r['group'],
          r['length'],
          r['modificationTime'],
          a + r['pathSuffix']
        )
    except Exception as e:
      print str(e)


def dfs_cat(args, hdfs):
  """ output file content
  """
  opts, args = parse_args(args, '')
  for a in args:
    try:
      print hdfs.open(a)
    except Exception as e:
      print str(e)


def dfs_mv(args, hdfs):
  """ move(rename) files/dirs
  """
  opts, args = parse_args(args, '')
  if len(args) < 2:
    print 'help'
    sys.exit(2)
  try:
    print hdfs.rename(args[0], args[1])
  except Exception as e:
    print str(e)


def dfs_put(args, hdfs):
  """ copy from local
  """
  opts, args = parse_args(args, '')
  try:
    print hdfs.create(args[0], args[1])
  except Exception as e:
    print str(e)


def dfs_get(args, hdfs):
  """ copy to local
  """
  opts, args = parse_args(args, '')


def dfs_mkdir(args, hdfs):
  """ make dirs
  """
  permission = '700'
  opts, args = parse_args(args, 'p:')
  for o, a in opts:
    if o == '-p':
      permission = a
  for a in args:
    try:
      hdfs.mkdirs(a, permission)
    except Exception as e:
      print str(e)


def dfs_rm(args, hdfs):
  """ delete files/dirs
  """
  recursive = False
  opts, args = parse_args(args, 'r')
  for o, a in opts:
    if o == '-r':
      recursive = True
  for a in args:
    try:
      hdfs.delete(a, recursive)
    except Exception as e:
      print str(e)


def dfs_chown(args, hdfs):
  """ set owner of files/dirs
  """
  owner = ''
  group = ''
  opts, args = parse_args(args, 'o:g:')
  for o, a in opts:
    if o == '-o':
      owner = a
    if o == '-g':
      group = a
  for a in args:
    try:
      hdfs.setowner(a, owner, group)
    except Exception as e:
      print str(e)


def dfs_chmod(args, hdfs):
  """ set permission of files/dirs
  """
  permission = '700'
  opts, args = parse_args(args, 'p:')
  for o, a in opts:
    if o == '-p':
      permission = a
  for a in args:
    try:
      hdfs.set_permission(a, permission)
    except Exception as e:
      print str(e)


def dfs_summary(args, hdfs):
  """ get content summary of a dir
  """
  opts, args = parse_args(args, '')
  if not args:
    args = ['']
  if len(args) > 1:
    print 'help'
    sys.exit(2)
  try:
    r = hdfs.get_content_summary(args[0])
    print json.dumps(r, indent=2)
  except Exception as e:
    print str(e)



def main():
  func_prefix = 'dfs_'
  func_list = [
    n for n in globals()
    if isinstance(globals()[n], types.FunctionType)
        and n.startswith(func_prefix)
  ]

  cmd = sys.argv[1] if len(sys.argv) > 1 else ''
  func_called = func_prefix + cmd

  if func_called not in func_list:
    print 'usage: {} <command> [<args>]'.format(__file__)
    print
    print 'supported commands are:'
    print
    for func in func_list:
      print(
        '{:10}{}'.format(
          func.replace(func_prefix, ''),
          globals()[func].__doc__.strip()
        )
      )
    print
    return

  with open(sys.path[0] + '/config.json', 'r') as f:
    cfg = json.load(f)

  hdfs = WebHDFS(**cfg)
  globals()[func_called](sys.argv[2:], hdfs)


if __name__ == "__main__":
  main()

